{"version":3,"file":"static/js/409.52cf215d.chunk.js","mappings":"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","sources":["components/AddressForm.jsx","components/OrderListItem.jsx","components/MyOrders.jsx","components/UpdateProfile.jsx","pages/Profile.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ImSpinner2 } from \"react-icons/im\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst AddressForm = ({ submitFunction }) => {\r\n  const {\r\n    loading,\r\n    data: {\r\n      user: { fullAddress },\r\n    }\r\n  } = useSelector((state) => state.user);\r\n\r\n  const [formData, setFormData] = useState({\r\n    address: \"\",\r\n    city: \"\",\r\n    postalCode: \"\",\r\n    country: \"\",\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    submitFunction(formData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (fullAddress) {\r\n      setFormData({ ...fullAddress });\r\n    }\r\n  }, [fullAddress]);\r\n\r\n  return (\r\n    <form action=\"\" className=\"address-form\" onSubmit={handleSubmit}>\r\n      <label htmlFor=\"address\" className=\"form-label\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"address\"\r\n          id=\"address\"\r\n          onChange={handleChange}\r\n          value={formData.address}\r\n        />\r\n        <span>address</span>\r\n      </label>\r\n      <label htmlFor=\"postalCode\" className=\"form-label\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"postalCode\"\r\n          id=\"postalCode\"\r\n          onChange={handleChange}\r\n          value={formData.postalCode}\r\n        />\r\n        <span>postal code</span>\r\n      </label>\r\n      <label htmlFor=\"city\" className=\"form-label\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"city\"\r\n          id=\"city\"\r\n          onChange={handleChange}\r\n          value={formData.city}\r\n        />\r\n        <span>city</span>\r\n      </label>\r\n      <label htmlFor=\"country\" className=\"form-label\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"country\"\r\n          id=\"country\"\r\n          onChange={handleChange}\r\n          value={formData.country}\r\n        />\r\n        <span>country</span>\r\n      </label>\r\n      <button type=\"submit\" disabled={loading} className=\"button-1\">\r\n        {loading ? <ImSpinner2 className=\"fa-spin\" /> : \"Update\"}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddressForm;\r\n","import React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { RiEditBoxLine } from \"react-icons/ri\";\r\nimport { LuTrash } from \"react-icons/lu\";\r\nimport { IoClose } from \"react-icons/io5\";\r\n\r\nconst OrderListItem = ({\r\n    _id,\r\n    isDelivered,\r\n    totalPrice,\r\n    createdAt,\r\n    isPaid,\r\n    paidAt,\r\n    admin,\r\n    user,\r\n    deliveredAt\r\n  }) => {\r\n    const navigate = useNavigate()\r\n  return (\r\n    <div\r\n      className=\"order-item-container\"\r\n      onClick={(e) => [e.stopPropagation(), navigate(`/order/${_id}`)]}\r\n    >\r\n      <p className=\"ellipses\">{_id}</p>\r\n      {admin && <p className='ellipses'>{user?.name}</p>}\r\n      <p className=\"ellipses\">{createdAt.substring(0, 10)}</p>\r\n      <p className=\"ellipses\">${totalPrice}</p>\r\n      {isPaid?<p className=\"ellipses\">{paidAt.substring(0, 10)}</p>:<IoClose className={isPaid?'success':'failed'}/>}\r\n      {isDelivered?<p className=\"ellipses\">{deliveredAt.substring(0, 10)}</p>:<IoClose className={isDelivered?'success':'failed'}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OrderListItem","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport OrderListItem from \"./OrderListItem\";\r\nimport Pagination from \"./Pagination\";\r\nimport { getMyOrders } from \"../slices/orderSlice\";\r\nimport Loader from \"./Loader\";\r\nimport Skeleton from \"./Skeleton\";\r\n\r\nconst MyOrders = () => {\r\n  const {\r\n    loading,\r\n    data: { myOrders, totalPages },\r\n  } = useSelector((state) => state.orders);\r\n  const [page, setPage] = useState(1);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getMyOrders(page));\r\n  }, [page]);\r\n  return (\r\n    <div className=\"orders-history-container\">\r\n      <h1 className=\"heading-3\">my orders</h1>\r\n      <div className=\"profile-order-list\">\r\n        <div className=\"order-list-head\">\r\n          <span>ID</span>\r\n          <span>date</span>\r\n          <span>total</span>\r\n          <span>paid</span>\r\n          <span>delivered</span>\r\n        </div>\r\n        {!loading\r\n          ? myOrders?.map((order) => {\r\n              return <OrderListItem key={order._id} {...order} admin={false} />;\r\n            })\r\n          : new Array(5).fill(0).map((_, i) => {\r\n              return <Skeleton cls=\"list-item-skeleton\" />;\r\n            })}\r\n      </div>\r\n      <Pagination page={page} setPage={setPage} totalPages={totalPages} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyOrders;\r\n","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateUserProfile } from \"../slices/userSlice\";\r\nimport { ImSpinner2 } from \"react-icons/im\";\r\n\r\nconst UpdateProfile = () => {\r\n  const {\r\n    loading,\r\n    data: {\r\n      user: { name, email },\r\n    },\r\n  } = useSelector((state) => state.user);\r\n\r\n  const [formData, setFormData] = useState({\r\n    name: name,\r\n    email: email,\r\n    password: \"\",\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateUserProfile(formData));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"update-profile-container\">\r\n      <h1 className=\"heading-3\">Privacy</h1>\r\n      <form className=\"update-profile-form\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"name\" className=\"form-label\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id=\"name\"\r\n            onChange={handleChange}\r\n            value={formData.name}\r\n          />\r\n          <span>name</span>\r\n        </label>\r\n        <label htmlFor=\"email\" className=\"form-label\">\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n            value={formData.email}\r\n          />\r\n          <span>email</span>\r\n        </label>\r\n        <label htmlFor=\"password\" className=\"form-label\">\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            onChange={handleChange}\r\n            value={formData.password}\r\n          />\r\n          <span>Update Password</span>\r\n        </label>\r\n        <button type=\"submit\" disabled={loading} className=\"button-1\">\r\n          {loading ? <ImSpinner2 className=\"fa-spin\" /> : \"Save Changes\"}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateProfile;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport MyOrders from \"../components/MyOrders\";\r\nimport { logout, updateUserProfile } from \"../slices/userSlice\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getMyOrders } from \"../slices/orderSlice\";\r\nimport UpdateProfile from \"../components/UpdateProfile\";\r\nimport {\r\n  LuShoppingCart,\r\n  LuUser,\r\n  LuLock,\r\n  LuLogOut,\r\n  LuLayoutDashboard,\r\n} from \"react-icons/lu\";\r\nimport AddressForm from \"../components/AddressForm\";\r\nimport Loader from \"../components/Loader\";\r\nimport Skeleton from \"../components/Skeleton\";\r\n\r\nconst UpdateAddress = () => {\r\n  const dispatch = useDispatch();\r\n  const updateForm = (data) => {\r\n    console.log(data);\r\n    dispatch(updateUserProfile({ fullAddress: { ...data } }));\r\n  };\r\n  return (\r\n    <div className=\"update-form-container\">\r\n      <h1 className=\"heading-3\">Address</h1>\r\n      <div className=\"address-form-container\">\r\n        <AddressForm submitFunction={updateForm} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AccountInfo = () => {\r\n  const {\r\n    loading,\r\n    data: {\r\n      user: { name, image, _id, email, isAdmin, createdAt, fullAddress }\r\n    },\r\n  } = useSelector((state) => state.user);\r\n  return (\r\n    <div className=\"account-info-container\">\r\n      <h1 className=\"heading-3\">Account</h1>\r\n      <div className=\"account-content\">\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"account-info\">\r\n              <h5 className=\"heading-4\">Name</h5>\r\n              <p className=\"body-text-3\">{name}</p>\r\n            </div>\r\n            <div className=\"account-info\">\r\n              <h5 className=\"heading-4\">Email</h5>\r\n              <p className=\"body-text-3\"> {email}</p>\r\n            </div>\r\n            <div className=\"account-info\">\r\n              <h5 className=\"heading-4\">Address</h5>\r\n              <p className=\"body-text-3\">\r\n                {fullAddress?.address && (\r\n                  <>\r\n                    {fullAddress?.address}, {fullAddress?.postalCode}\r\n                    <br />\r\n                    {fullAddress?.city}, {fullAddress?.country}\r\n                  </>\r\n                )}\r\n              </p>\r\n            </div>\r\n            <div className=\"account-info\">\r\n              <h5 className=\"heading-4\">Joined On</h5>\r\n              <p className=\"body-text-3\">{createdAt.substring(0, 10)}</p>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <Skeleton cls=\"profile-info-skeleton\"/>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Profile = () => {\r\n  const {\r\n    loading,\r\n    data: {\r\n      user: { name, image, _id, email, isAdmin },\r\n    },\r\n  } = useSelector((state) => state.user);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [profileLink, setProfileLink] = useState(0);\r\n\r\n  const profileComponents = [\r\n    {\r\n      name: \"account\",\r\n      component: <AccountInfo />,\r\n      icon: <LuUser />,\r\n    },\r\n    {\r\n      name: \"privacy\",\r\n      component: <UpdateProfile />,\r\n      icon: <LuLock />,\r\n    },\r\n    {\r\n      name: \"address\",\r\n      component: <UpdateAddress />,\r\n      icon: <LuLock />,\r\n    },\r\n    {\r\n      name: \"orders\",\r\n      component: <MyOrders />,\r\n      icon: <LuShoppingCart />,\r\n    },\r\n  ];\r\n\r\n  const ActiveComponents = useCallback(\r\n    () => profileComponents[profileLink].component,\r\n    [profileLink]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.title = \"Profile\";\r\n  }, []);\r\n\r\n  return (\r\n    <section id=\"profile\">\r\n      <div className=\"container\">\r\n        <div className=\"profile-container\">\r\n          <div className=\"profile-info\">\r\n            <div className=\"profile-img\">\r\n              {!loading ? (\r\n                <img src={image} alt={name} />\r\n              ) : (\r\n                <Skeleton cls=\"profile-image-skeleton\" />\r\n              )}\r\n            </div>\r\n            {!loading ? (\r\n              <div>\r\n                <h1 className=\"heading-4\">{name}</h1>\r\n                <p className=\"body-text-3\">{email}</p>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <Skeleton cls=\"profile-name-skeleton\" />\r\n                <Skeleton cls=\"profile-mail-skeleton\" />\r\n              </div>\r\n            )}\r\n          </div>\r\n          <ul className=\"profile-links\">\r\n            {profileComponents.map((p, i) => {\r\n              return (\r\n                <li\r\n                  key={p.name}\r\n                  className={`profile-link ${\r\n                    profileLink === i ? \"profile-link-active\" : \"\"\r\n                  }`}\r\n                  onClick={() => setProfileLink(i)}\r\n                >\r\n                  {p.icon}\r\n                  <span>{p.name}</span>\r\n                </li>\r\n              );\r\n            })}\r\n            {isAdmin && (\r\n              <li\r\n                className=\"profile-link\"\r\n                onClick={() => navigate(\"/dashboard\")}\r\n              >\r\n                <LuLayoutDashboard />\r\n                <span>dashboard</span>\r\n              </li>\r\n            )}\r\n            <li className=\"profile-link\" onClick={() => dispatch(logout())}>\r\n              <LuLogOut />\r\n              <span>logout</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"profile-content\">\r\n          <ActiveComponents />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["_ref","submitFunction","loading","data","user","fullAddress","useSelector","state","formData","setFormData","useState","address","city","postalCode","country","handleChange","e","name","value","target","_objectSpread","useEffect","_jsxs","action","className","onSubmit","preventDefault","children","htmlFor","_jsx","type","id","onChange","disabled","ImSpinner2","_id","isDelivered","totalPrice","createdAt","isPaid","paidAt","admin","deliveredAt","navigate","useNavigate","onClick","stopPropagation","concat","substring","IoClose","MyOrders","myOrders","totalPages","orders","page","setPage","dispatch","useDispatch","getMyOrders","Array","fill","map","_","i","Skeleton","cls","order","OrderListItem","Pagination","UpdateProfile","email","password","updateUserProfile","UpdateAddress","AddressForm","console","log","AccountInfo","image","isAdmin","_Fragment","Profile","profileLink","setProfileLink","profileComponents","component","icon","LuUser","LuLock","LuShoppingCart","ActiveComponents","useCallback","document","title","src","alt","p","LuLayoutDashboard","logout","LuLogOut"],"sourceRoot":""}