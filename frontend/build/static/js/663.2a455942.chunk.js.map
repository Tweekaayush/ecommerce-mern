{"version":3,"file":"static/js/663.2a455942.chunk.js","mappings":"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","sources":["pages/ResetPassword.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { resetPassword } from \"../slices/userSlice\";\r\nimport { ImSpinner2 } from \"react-icons/im\";\r\n\r\nconst ResetPassword = () => {\r\n  const { state, search } = useLocation();\r\n  const token = new URLSearchParams(search).get(\"token\");\r\n  const user = new URLSearchParams(search).get(\"user\");\r\n  const [formData, setFormData] = useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n  const [formDataError, setFormDataError] = useState({\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const {\r\n    loading,\r\n    data: {\r\n      user: { _id },\r\n    },\r\n    successMessage,\r\n    error,\r\n  } = useSelector((state) => state.user);\r\n\r\n  const validate = () => {\r\n    let error = {\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n    };\r\n\r\n    if (formData.password === \"\") {\r\n      error.password = \"Please enter a new password\";\r\n    }\r\n\r\n    if (formData.password !== formData.confirmPassword) {\r\n      error.confirmPassword = \"Password does not match\";\r\n    }\r\n\r\n    setFormDataError(error);\r\n    return error.password === \"\" && error.confirmPassword === \"\";\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate())\r\n      dispatch(resetPassword({ password: formData.password, user, token }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (_id) {\r\n      state ? navigate(state.previousURL) : navigate(\"/profile\");\r\n    }\r\n  }, [_id]);\r\n\r\n  useEffect(() => {\r\n    if (successMessage) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [successMessage]);\r\n\r\n  useEffect(() => {\r\n    document.title = \"Reset Password\";\r\n  }, []);\r\n\r\n  return (\r\n    <section id=\"auth-container\">\r\n      <div className=\"container\">\r\n        <div className=\"form-container\">\r\n          <h1 className=\"heading-2\">Reset Password</h1>\r\n          <p className=\"body-text-1\">Make a new password.</p>\r\n          <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"password\" className=\"form-label\">\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n                value={formData.password}\r\n                onChange={(e) =>\r\n                  setFormData({ ...formData, [e.target.name]: e.target.value })\r\n                }\r\n              />\r\n              <span>password</span>\r\n              {formDataError.password && (\r\n                <p className=\"form-error-msg\">{formDataError.password}</p>\r\n              )}\r\n            </label>\r\n            <label htmlFor=\"confirmPassword\" className=\"form-label\">\r\n              <input\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                id=\"confirmPassword\"\r\n                value={formData.confirmPassword}\r\n                onChange={(e) =>\r\n                  setFormData({ ...formData, [e.target.name]: e.target.value })\r\n                }\r\n              />\r\n              <span>confirm Password</span>\r\n              {formDataError.confirmPassword && (\r\n                <p className=\"form-error-msg\">\r\n                  {formDataError.confirmPassword}\r\n                </p>\r\n              )}\r\n            </label>\r\n            <button type=\"submit\" disabled={loading} className=\"button-1\">\r\n              {loading ? <ImSpinner2 className=\"fa-spin\" /> : \"Reset\"}\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"names":["ResetPassword","state","search","useLocation","token","URLSearchParams","get","user","formData","setFormData","useState","password","confirmPassword","formDataError","setFormDataError","dispatch","useDispatch","navigate","useNavigate","loading","data","_id","successMessage","error","useSelector","useEffect","previousURL","document","title","_jsx","id","children","className","_jsxs","onSubmit","e","preventDefault","validate","resetPassword","htmlFor","type","name","value","onChange","_objectSpread","target","disabled","ImSpinner2"],"sourceRoot":""}